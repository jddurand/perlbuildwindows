diff --git a/File.xs b/File.xs
new file mode 100644
index 0000000..8676e7f
--- /dev/null
+++ b/File.xs
@@ -0,0 +1,204 @@
+/* Bare copy of a part of Win32.xs */
+#define WIN32_LEAN_AND_MEAN
+#define _WIN32_WINNT 0x0500
+#include <windows.h>
+
+#define PERL_NO_GET_CONTEXT
+#include "EXTERN.h"
+#include "perl.h"
+#include "XSUB.h"
+
+#define GETPROC(fn) pfn##fn = (PFN##fn)GetProcAddress(module, #fn)
+
+typedef LONG (WINAPI *PFNRegGetValueA)(HKEY, LPCSTR, LPCSTR, DWORD, LPDWORD, PVOID, LPDWORD);
+
+/* Use explicit struct definition because wSuiteMask and
+ * wProductType are not defined in the VC++ 6.0 headers.
+ * WORD type has been replaced by unsigned short because
+ * WORD is already used by Perl itself.
+ */
+struct g_osver_t {
+    DWORD dwOSVersionInfoSize;
+    DWORD dwMajorVersion;
+    DWORD dwMinorVersion;
+    DWORD dwBuildNumber;
+    DWORD dwPlatformId;
+    CHAR  szCSDVersion[128];
+    unsigned short wServicePackMajor;
+    unsigned short wServicePackMinor;
+    unsigned short wSuiteMask;
+    BYTE  wProductType;
+    BYTE  wReserved;
+} g_osver = {0, 0, 0, 0, 0, "", 0, 0, 0, 0, 0};
+BOOL g_osver_ex = TRUE;
+
+XS(w32_GetOSVersion)
+{
+    dXSARGS;
+    if (items)
+	Perl_croak(aTHX_ "usage: Win32::GetOSVersion()");
+
+    if (GIMME_V == G_SCALAR) {
+        XSRETURN_IV(g_osver.dwPlatformId);
+    }
+    XPUSHs(sv_2mortal(newSVpvn(g_osver.szCSDVersion, strlen(g_osver.szCSDVersion))));
+
+    XPUSHs(sv_2mortal(newSViv(g_osver.dwMajorVersion)));
+    XPUSHs(sv_2mortal(newSViv(g_osver.dwMinorVersion)));
+    XPUSHs(sv_2mortal(newSViv(g_osver.dwBuildNumber)));
+    XPUSHs(sv_2mortal(newSViv(g_osver.dwPlatformId)));
+    if (g_osver_ex) {
+        XPUSHs(sv_2mortal(newSViv(g_osver.wServicePackMajor)));
+        XPUSHs(sv_2mortal(newSViv(g_osver.wServicePackMinor)));
+        XPUSHs(sv_2mortal(newSViv(g_osver.wSuiteMask)));
+        XPUSHs(sv_2mortal(newSViv(g_osver.wProductType)));
+    }
+    PUTBACK;
+}
+
+XS(w32_GetProcessPrivileges)
+{
+    dXSARGS;
+    BOOL ret;
+    HV *priv_hv;
+    HANDLE proc_handle, token;
+    char *priv_name = NULL;
+    TOKEN_PRIVILEGES *privs = NULL;
+    DWORD i, pid, priv_name_len = 100, privs_len = 300;
+
+    if (items > 1)
+        Perl_croak(aTHX_ "usage: Win32::GetProcessPrivileges([$pid])");
+
+    if (items == 0) {
+        EXTEND(SP, 1);
+        pid = GetCurrentProcessId();
+    }
+    else {
+        pid = (DWORD)SvUV(ST(0));
+    }
+
+    proc_handle = OpenProcess(PROCESS_QUERY_INFORMATION, FALSE, pid);
+
+    if (!proc_handle)
+        XSRETURN_NO;
+
+    ret = OpenProcessToken(proc_handle, TOKEN_QUERY, &token);
+    CloseHandle(proc_handle);
+
+    if (!ret)
+        XSRETURN_NO;
+
+    do {
+        Renewc(privs, privs_len, char, TOKEN_PRIVILEGES);
+        ret = GetTokenInformation(
+            token, TokenPrivileges, privs, privs_len, &privs_len
+        );
+    } while (!ret && GetLastError() == ERROR_INSUFFICIENT_BUFFER);
+
+    CloseHandle(token);
+
+    if (!ret) {
+        Safefree(privs);
+        XSRETURN_NO;
+    }
+
+    priv_hv = newHV();
+    New(0, priv_name, priv_name_len, char);
+
+    for (i = 0; i < privs->PrivilegeCount; ++i) {
+        DWORD ret_len = 0;
+        LUID_AND_ATTRIBUTES *priv = &privs->Privileges[i];
+        BOOL is_enabled = !!(priv->Attributes & SE_PRIVILEGE_ENABLED);
+
+        if (priv->Attributes & SE_PRIVILEGE_REMOVED)
+            continue;
+
+        do {
+            ret_len = priv_name_len;
+            ret = LookupPrivilegeNameA(
+                NULL, &priv->Luid, priv_name, &ret_len
+            );
+
+            if (ret_len > priv_name_len) {
+                priv_name_len = ret_len + 1;
+                Renew(priv_name, priv_name_len, char);
+            }
+        } while (!ret && GetLastError() == ERROR_INSUFFICIENT_BUFFER);
+
+        if (!ret) {
+            SvREFCNT_dec((SV*)priv_hv);
+            Safefree(privs);
+            Safefree(priv_name);
+            XSRETURN_NO;
+        }
+
+        hv_store(priv_hv, priv_name, ret_len, newSViv(is_enabled), 0);
+    }
+
+    Safefree(privs);
+    Safefree(priv_name);
+
+    ST(0) = sv_2mortal(newRV_noinc((SV*)priv_hv));
+    XSRETURN(1);
+}
+
+XS(w32_IsDeveloperModeEnabled)
+{
+    dXSARGS;
+    LONG status;
+    DWORD val, val_size = sizeof(val);
+    PFNRegGetValueA pfnRegGetValueA;
+    HMODULE module;
+
+    if (items)
+        Perl_croak(aTHX_ "usage: Win32::IsDeveloperModeEnabled()");
+
+    EXTEND(SP, 1);
+
+    /* developer mode was introduced in Windows 10 */
+    if (g_osver.dwMajorVersion < 10)
+        XSRETURN_NO;
+
+    module = GetModuleHandleA("advapi32.dll");
+    GETPROC(RegGetValueA);
+    if (!pfnRegGetValueA)
+        XSRETURN_NO;
+
+    status = pfnRegGetValueA(
+        HKEY_LOCAL_MACHINE,
+        "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\AppModelUnlock",
+        "AllowDevelopmentWithoutDevLicense",
+        RRF_RT_REG_DWORD | KEY_WOW64_64KEY,
+        NULL,
+        &val,
+        &val_size
+    );
+
+    if (status == ERROR_SUCCESS && val == 1)
+        XSRETURN_YES;
+
+    XSRETURN_NO;
+}
+
+MODULE = Test::File            PACKAGE = Test::File::Win32
+
+PROTOTYPES: DISABLE
+
+BOOT:
+{
+    const char *file = __FILE__;
+
+    if (g_osver.dwOSVersionInfoSize == 0) {
+        g_osver.dwOSVersionInfoSize = sizeof(g_osver);
+        if (!GetVersionExA((OSVERSIONINFOA*)&g_osver)) {
+            g_osver_ex = FALSE;
+            g_osver.dwOSVersionInfoSize = sizeof(OSVERSIONINFOA);
+            GetVersionExA((OSVERSIONINFOA*)&g_osver);
+        }
+    }
+
+    newXS("Test::File::Win32::GetOSVersion", w32_GetOSVersion, file);
+    newXS("Test::File::Win32::GetProcessPrivileges", w32_GetProcessPrivileges, file);
+    newXS("Test::File::Win32::IsDeveloperModeEnabled", w32_IsDeveloperModeEnabled, file);
+    XSRETURN_YES;
+}
diff --git a/Makefile.PL b/Makefile.PL
index fe7d3cc..fbfb88d 100644
--- a/Makefile.PL
+++ b/Makefile.PL
@@ -95,6 +95,14 @@ my %WriteMakefile = (
 	test   => { TESTS    => 't/*.t t/*/*.t' },
 	);
 
+sub MY::dynamic {
+    #
+    # No dynamic library unless on MSWin32
+    #
+    package MY;
+    my ($self) = @_;
+    $^O eq 'MSWin32' ? $self->SUPER::dynamic : '';
+}
 
 sub arguments { \%WriteMakefile }
 
diff --git a/lib/Test/File.pm b/lib/Test/File.pm
index 12c383f..236c4ba 100644
--- a/lib/Test/File.pm
+++ b/lib/Test/File.pm
@@ -103,7 +103,48 @@ sub _win32 {
 	}
 
 # returns true if symlinks can't exist
-sub _no_symlinks_here { ! eval { symlink("",""); 1 } }
+BEGIN {
+	my $cannot_symlink;
+
+	sub _no_symlinks_here {
+		return $cannot_symlink if defined $cannot_symlink;
+
+		$cannot_symlink = ! do {
+			eval {
+				symlink("","");                 # symlink exist in perl
+				_IsSymlinkCreationAllowed()		# symlink is ok in current session
+				}
+		};
+	}
+
+	sub _IsSymlinkCreationAllowed {
+		if ($^O eq 'MSWin32') {
+			#
+			# Bare copy of Perl's Win32::IsSymlinkCreationAllowed but with Test::File::Win32 namespace instead of Win32
+			#
+			my(undef, $major, $minor, $build) = Test::File::Win32::GetOSVersion();
+
+			# Vista was the first Windows version with symlink support
+			return !!0 if $major < 6;
+
+			# Since Windows 10 1703, enabling the developer mode allows to create
+			# symlinks regardless of process privileges
+			if ($major > 10 || ($major == 10 && ($minor > 0 || $build > 15063))) {
+				return !!1 if Test::File::Win32::IsDeveloperModeEnabled();
+			}
+
+			my $privs = Test::File::Win32::GetProcessPrivileges();
+
+			return !!0 unless $privs;
+
+			# It doesn't matter if the permission is enabled or not, it just has to
+			# exist. CreateSymbolicLink() will automatically enable it when needed.
+			return exists $privs->{SeCreateSymbolicLinkPrivilege};
+		}
+		
+		1;
+	}
+}
 
 # owner_is and owner_isn't should skip on OS where the question makes no
 # sense.  I really don't know a good way to test for that, so I'm going
@@ -126,6 +167,17 @@ sub _obviously_non_multi_user {
 
 =over 4
 
+=item has_symlinks
+
+Returns true is this module thinks that the current system supports
+symlinks.
+This is not a test function. It's something that tests can use to
+determine what it should expect or skip.
+
+=cut
+
+sub has_symlinks { ! _no_symlinks_here() }
+
 =item file_exists_ok( FILENAME [, NAME ] )
 
 Ok if the file exists, and not ok otherwise.
diff --git a/t/links.t b/t/links.t
index 5673cfe..3c5f8b2 100644
--- a/t/links.t
+++ b/t/links.t
@@ -4,7 +4,7 @@ use Test::Builder::Tester;
 use Test::More 1;
 use Test::File;
 
-my $can_symlink = eval { symlink("",""); 1 };
+my $can_symlink = Test::File::has_symlinks();
 
 plan skip_all => "This system does't do symlinks" unless $can_symlink;
 
